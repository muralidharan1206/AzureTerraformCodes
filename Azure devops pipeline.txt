Deploy azure infrastructure using azure pipelines:
-------------------------------------------------
https://gmusumeci.medium.com/deploying-terraform-infrastructure-using-azure-devops-pipelines-step-by-step-d58b68fc666d

Terraform with azure devops pipeline:
-------------------------------------
https://purple.telstra.com/blog/terraform-with-azure-devops-pipeline


https://claytonshieldsjr.medium.com/terraform-azure-gitlab-ci-94ab4653e0fc

__________________________________________________________

Prerequisites:

Azure subscription
Azure service principal
Azure remote backend for terraform --> we will store our terraform state file in a remote backend location. We need resource group, storage account, container.
Azure devops account --> it is a separate service from the azure cloud.


1.CRATING A SERVICE PRINCIPAL AND CLIENT SECRET:
Using a service principal also known as SPN, is a best practice for devops or CI/CD encironment.

First we need to authenticate to azure.
az login
To list the azure subscription
az account list --output table
We can select the subscription using the following command(both subscription ID and subscription name are accepted)
az account set --subscription <Azure-subscription-id>
To create service principal account
az as sp create-for-rbac --role="Contributor" --scope="/subscription/subscription-id"
(or)
az ad sp create-fo-rbac --role="Contributor" --scope="/subscription/subscription-id" --name="Azure-Devops"
These values will be mapped to these terraform variables:
appID (Azure)-> client_id (Terraform)
password (Azure) -> client_secret (Terraform)
tenant (Azure) -> tenant_id (Terraform)
Configuring the remote backend to use azure storage with terraform.

az-remote-backend-variables.tf
------------------------------
# company
variable "company" {
  type = string
  description = "This variable defines the name of the company"
}
# environment
variable "environment" {
  type = string
  description = "This variable defines the environment to be built"
}
# azure region
variable "location" {
  type = string
  description = "Azure region where resources will be created"
  default = "north europe"
}

az-remote-backend-main.tf
-------------------------
# Generate a random storage name
resource "random_string" "tf-name" {
  length = 8
  upper = false
  number = true
  lower = true
  special = false
}
# Create a Resource Group for the Terraform State File
resource "azurerm_resource_group" "state-rg" {
  name = "${lower(var.company)}-tfstate-rg"
  location = var.location
  
  lifecycle {
    prevent_destroy = true
  }
  tags = {
    environment = var.environment
  }
}
# Create a Storage Account for the Terraform State File
resource "azurerm_storage_account" "state-sta" {
  depends_on = [azurerm_resource_group.state-rg]
  name = "${lower(var.company)}tf${random_string.tf-name.result}"
  resource_group_name = azurerm_resource_group.state-rg.name
  location = azurerm_resource_group.state-rg.location
  account_kind = "StorageV2"
  account_tier = "Standard"
  access_tier = "Hot"
  account_replication_type = "ZRS"
  enable_https_traffic_only = true
   
  lifecycle {
    prevent_destroy = true
  }
  tags = {
    environment = var.environment
  }
}
# Create a Storage Container for the Core State File
resource "azurerm_storage_container" "core-container" {
  depends_on = [azurerm_storage_account.state-sta]
  name = "core-tfstate"
  storage_account_name = azurerm_storage_account.state-sta.name
}

az-remote-backend-output.tf
---------------------------

output "terraform_state_resource_group_name" {
  value = azurerm_resource_group.state-rg.name
}
output "terraform_state_storage_account" {
  value = azurerm_storage_account.state-sta.name
}
output "terraform_state_storage_container_core" {
  value = azurerm_storage_container.core-container.name
}

Creating azure devops account:
Azure devops is a separate service from azure cloud. We need to create an account at https://dev.azure.com


Pipeline notes:
Pipeline in devops is a set of process (automated or can be triggered manually) which is used to make available your project code to users.
Azure pipeline is a cloud service that you can use to automatically build and test your code project and make it available to other users.

Process in pipeline:
Pipeline in azure devops is designed as per project need.
we can increase or decrease number of steps while designing the pipeline

Repo --> Build --> Test --> Deploy

Getting the code from the repository
Building the code
Testing the code
Deploy the code in the server

Application Type & language:
we can use any programming language in azure devops.

Source code:
Project source code must be in any version control sysetem.

Deployment target:
The location of the server where will bbe deploy our code.
Azure devops can be used to deploy your code on multiple targets


what is CI/CD in pipeline?

CI(Continous integration) CI is used to automate tests and build for the project. It is used to find bugs or other build issue in early phase.
CD(Continous Delivery) CD is used to automatically deploy and test code in multiple stages(environments like dev,qa,staging etc) to maintain the quality.

When CI/CD are triggered?

Manually - Anytime you can run the CI/CD pipeline to build and test your code.
Automatically - On each commit, On a fix interval, At a particular time.

Create a new Build(CI) pipeline:

